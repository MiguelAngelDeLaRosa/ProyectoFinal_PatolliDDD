/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guis;

import aplicacion.Aplicacion;
import java.awt.Color;
import javax.swing.JOptionPane;

/**
 *
 * @author gerar
 */
public class FrmConfigurarPartida extends javax.swing.JFrame {

    private Aplicacion casosDeUso;

    /**
     * Creates new form FrmConfigurarPartida2
     */
    public FrmConfigurarPartida(Aplicacion casosDeUso) {
        initComponents();
        this.casosDeUso = casosDeUso;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBoxCantidadDeCasillas = new javax.swing.JComboBox<>();
        comboBoxCantidadDeJugadores = new javax.swing.JComboBox<>();
        txtPuntosPorJugador = new javax.swing.JTextField();
        btnAceptar = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        txtMontoPorApuesta = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNombreDelJugador = new javax.swing.JTextField();
        comboBoxColoresParaFicha = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comboBoxCantidadDeCasillas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "44", "52", "60" }));

        comboBoxCantidadDeJugadores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3", "4" }));

        txtPuntosPorJugador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPuntosPorJugadorKeyTyped(evt);
            }
        });

        btnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guis/Imagenes/txtAceptar.png"))); // NOI18N
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guis/Imagenes/txtRegresar.png"))); // NOI18N
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        txtMontoPorApuesta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMontoPorApuestaKeyTyped(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guis/Imagenes/txtCantidadJugadores.png"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guis/Imagenes/txtCantidadCasillas.png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guis/Imagenes/txtCantidadApuesta.png"))); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guis/Imagenes/txtMontoApuesta.png"))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guis/Imagenes/txtColorJugador.png"))); // NOI18N

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guis/Imagenes/txtNombreJugador.png"))); // NOI18N

        txtNombreDelJugador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreDelJugadorKeyTyped(evt);
            }
        });

        comboBoxColoresParaFicha.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Azul", "Verde", "Rojo", "Amarillo" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 268, Short.MAX_VALUE)
                .addComponent(btnAceptar)
                .addGap(106, 106, 106))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboBoxColoresParaFicha, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNombreDelJugador, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtMontoPorApuesta, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtPuntosPorJugador, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboBoxCantidadDeJugadores, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxCantidadDeCasillas, javax.swing.GroupLayout.Alignment.TRAILING, 0, 284, Short.MAX_VALUE))))
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxCantidadDeCasillas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxCantidadDeJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPuntosPorJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMontoPorApuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtNombreDelJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBoxColoresParaFicha, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(40, 40, 40)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtPuntosPorJugadorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPuntosPorJugadorKeyTyped
        Character c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
        }

        if (txtPuntosPorJugador.getText().length() >= 5) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPuntosPorJugadorKeyTyped

    private void txtMontoPorApuestaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoPorApuestaKeyTyped
        Character c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }

        if (txtMontoPorApuesta.getText().length() >= 5) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMontoPorApuestaKeyTyped

    private void txtNombreDelJugadorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreDelJugadorKeyTyped
        if (txtNombreDelJugador.getText().length() >= 20) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreDelJugadorKeyTyped

    /**
     * Valida que los campos de texto no estén vacíos y que cumplan con las
     * reglas necesarias para poder crear una partida.
     *
     * @return String vacío en caso de no tener error, en caso contrario, manda
     * un String con la descripción del error encontrado.
     */
    private String validacionDeCampos() {
        boolean montoPorApuestaEsMenorAPuntosPorJugador = true;

        String error = null;
        if (txtPuntosPorJugador.getText().isEmpty()) {
            error = "Debe ingresar un valor válido en el campo: PUNTOS POR JUGADOR";
            return error;
        }

        if (txtMontoPorApuesta.getText().isEmpty()) {
            error = "Debe ingresar un valor válido en el campo: MONTO POR APUESTA";
            return error;
        }

        int puntosPorJugador = Integer.parseInt(txtPuntosPorJugador.getText());
        int montoPorApuesta = Integer.parseInt(txtMontoPorApuesta.getText());

        if (puntosPorJugador < montoPorApuesta) {
            error = "El monto por apuesta no puede ser mayor a la cantidad de puntos por jugador.";
            return error;
        }

        if (txtNombreDelJugador.getText().isEmpty()) {
            error = "Debe ingresar un nombre en el campo: NOMBRE DE JUGADOR";
            return error;
        }
        return error;
    }

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed

        String error = validacionDeCampos();
        if (error == null) {
            int catidadDeCasillaPorAspa = (Integer.parseInt(comboBoxCantidadDeCasillas.getSelectedItem().toString())) / 8;
            int cantidadDeJugadores = Integer.parseInt(comboBoxCantidadDeJugadores.getSelectedItem().toString());
            int cantidadDePuntosPorJugador = Integer.parseInt(txtPuntosPorJugador.getText());
            int montoPorApuesta = Integer.parseInt(txtMontoPorApuesta.getText());
            String nombreDelJugador = txtNombreDelJugador.getText();
            Color colorDelJugador = colorSeleccionado();
            casosDeUso.crearPartida(catidadDeCasillaPorAspa, cantidadDeJugadores, cantidadDePuntosPorJugador, montoPorApuesta, nombreDelJugador, colorDelJugador);
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new FrmTablero(casosDeUso).setVisible(true);
                }
            });
            this.dispose();
        } else {
            JOptionPane.showConfirmDialog(null, error, "ERROR EN CAMPOS", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnAceptarActionPerformed

    /**
     * Devuelve un color, dependiendo de la opción seleccionada en el comboBox
     * de colores.
     *
     * @return Color seleccionado.
     */
    public Color colorSeleccionado() {
        Color color = null;
        String colorSeleccionado = comboBoxColoresParaFicha.getSelectedItem().toString();

        switch (colorSeleccionado) {
            case "Azul":
                color = Color.BLUE;
                break;
            case "Verde":
                color = Color.GREEN;
                break;
            case "Rojo":
                color = Color.RED;
                break;
            case "Amarillo":
                color = Color.YELLOW;
                break;
        }

        return color;
    }
    
    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
        dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> comboBoxCantidadDeCasillas;
    private javax.swing.JComboBox<String> comboBoxCantidadDeJugadores;
    private javax.swing.JComboBox<String> comboBoxColoresParaFicha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtMontoPorApuesta;
    private javax.swing.JTextField txtNombreDelJugador;
    private javax.swing.JTextField txtPuntosPorJugador;
    // End of variables declaration//GEN-END:variables
}
